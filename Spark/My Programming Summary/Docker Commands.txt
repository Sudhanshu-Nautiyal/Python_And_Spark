 1 . *********** Docker ******************
 
What is Docker ?
	Docker is the world’s leading software container platform
	Docker makes the process of application deployment very easy and efficient and resolves a lot of issues related to deploying applications

	Docker is a tool designed to make it easier to deploy and run applications by using containers

	Docker gives you a standard way of packaging your application with all its dependencies in a container

	Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, 
	and ship it all out as one package. 

	Understand Docker with analogy of the Shipping industry

	How a real world problem was resolved using containers
	
 2. ********* Docker working **********	
 
 How Docker works ?
		Understand a general workflow of docker
		Difference between virtualization and containerization
		Understand docker client server architecture
		Understand:
		Docker file
		Docker images
		Docker Containers
		Docker Hub / Registry
		Docker client
		Docker server / daemon
		Docker engine
		
 3. ***** Benefits **********
  
		Benefits of using Docker

		Build app only once

		No worries that the application will not perform the same way it did on testing env

		Portability

		Version Control

		Isolation

		Productivity

		Docker simplifies
		
		DevOps  
		
  4. ********* Install Docker in LINUX *************

		Agenda:
		Prerequisites
		Connect to Linux
		Install Docker
		Start Docker
		Stop Docker
		Uninstall Docker


		Prerequisite
		OS should be 64 bit
		Linux kernel ver 3.10 or greater

		command to check : uname -r

		STEP 1 - Connect to Linux system

		STEP 2 - Install DOCKER
		sudo yum -y update
		sudo yum install -y docker

		docker
		docker --version

		STEP 3 - start DOCKER
		sudo service docker start
		sudo usermod -a -G docker "user"

		docker info

		docker run hello-world : to run hello-world image

		docker images : to get list of images present locally

		docker ps : to get list of running containers

		docker ps -a .  : to get list of all containers

		STEP 4 - stop DOCKER
		sudo service docker stop
		uninstall DOCKER
		sudo yum remove docker

		HELPFUL TIPS
		You can visit - https://get.docker.com/
		for more installation related help

		To install docker from binaries
		https://docs.docker.com/engine/instal...

		Installation steps for amazon ec2
		http://docs.aws.amazon.com/AmazonECS/...


		References:

		Linux free instance - https://aws.amazon.com/free/

		Docker Manuals - https://docs.docker.com/manuals/

		https://get.docker.com/

		https://docs.docker.com/engine/instal...

		http://docs.aws.amazon.com/AmazonECS/...
		
		
5. ************ Docker Basic Commands ****************

Docker Basic Commands
Step by Step for Beginners

1. To install Docker

		sudo yum -y update
		sudo yum -y docker


		Basic
		: docker version
		: docker -v
		: docker info
		: docker --help
		: docker login
		————————————
		Images
		: docker images -> (example docker images --help)
		: docker pull
		: docker rmi
		————————————
		Containers
		: docker ps
		: docker run (docker run -it ubuntu) -> To go inside the ubuntu container
		: docker start -> -> To Start the container
		: docker stop -> To stop to container
		————————————
		System
		: docker stats
		: docker system df ->Disk Usage of docker
		: docker system prune -> this command remove all the dangling images

		References - 
		https://hub.docker.com/
		https://docs.docker.com/engine/refere...		
		
     Dangling Images -> Images that are not associated with a running container.
  


6.  ************** Docker Images **************

Docker images are template used to create docker containers. Container is a running instance of an image

1. What are images -> Docker images are template used to create docker containers. Container is a running instance of an image
2. How to pull images -> 
3. How to run a container using an images
4. Basic command

1. Docker pull ubuntu:18.04 (by default latest tag get pulled)
   docker image --help
   docker pull image (docker pull ubuntu:18.04)
   docker images
   docker images -q (to show only image id nothing else)
   docker images -f "dangling-false"
   docker images -f "dangling-true"
   docker images -f "dangling-false" - q
   
   docker run image -> To run an image for creating container out of it
   docker rmi image
   docker rmi -f image
   docker run -it ubuntu bash (To go inside the container)
   docker run --name = MyUbuntu-it ubuntu bash
   docker inspect MyUbuntu
   
   

7.  ***************** Containers *********************
1. What are Containers 
2. How to create a Container 
3. How to start stop a container
4. Basic commands   


1. What are Containers => Running instances of docker images.

docker ps
docker run imageName
docker start containerName/ID
docker stop containerName/ID

docker pause containerName/ID
docker unpause containerName/ID

docker top containerName/ID
docker stats containerName/ID

docker attach containerName/ID -> to go inside the container
docker kill containerName/ID

docker rm containerName/ID

docker history containerName/ID


8. ***** Docker File *****************

1. What is dockerfile
2. How to create a dockerfile
3. How to build image from dockerfile
4. Basic commands
Dockerfile-: A text file with instructions to build an image.
Automation of Docker Image Creation

FROM
RUN 
CMD

Step 1: Create a file named Dockerfile.

Step 2: Add instructions in Dockerfile

Step3 : Build dockerfile to create image

Step 4 : Run image to create container

COMMANDS :--

:docker build -t imageName:Tag directoryOfDockerfile

:docker run image

docker build -t myimage1:1.0 .

https://github.com/wsargent/docker-ch...
https://docs.docker.com/engine/refere...

https://www.google.co.in/search?q=doc...

9  ***************** Docker Compose ************************

Today we will learn :

1. What | Why - Docker Compose
2. How to install
3. How to create docker compose file
4. How to use docker compose file to create services
5. Basic Commands

TIPS


Docker compose
: tool for defining & running multi-container docker applications
: use yaml files to configure application services (docker-compose.yml)
: can start all services with a single command : docker compose up
: can stop all services with a single command : docker compose down
: can scale up selected services when required


Step 1 : install docker compose
   (already installed on windows and mac with docker)
   docker-compose -v
   
   2 Ways

   1.  https://github.com/docker/compose/rel...
       run command in the link to install a docker compose

   2. Using PIP
    pip install -U docker-compose

Step 2 : Create docker compose file at any location on your system
   docker-compose.yml

Step 3 : Check the validity of file by command
    docker-compose config

Step 4 : Run docker-compose.yml file by command
   docker-compose up -d

Steps 5 : Bring down application by command
   docker-compose down

TIPS
How to scale services

—scale
docker-compose up -d --scale database=4


 10. *******************  Docker Volumes ********************

1. What are Volumes
2. How to create / list / delete volumes
3. How to attach volume to a container
4. How to share volume among containers
5. What are bind mounts
Volumes are the preferred mechanism for persisting data generated by and used by Docker containers

: docker volume  //get information
: docker volume create
: docker volume ls
: docker volume inspect
: docker volume rm
: docker volume prune

Use of Volumes
===========
Decoupling container from storage
Share volume (storage/data) among different containers
Attach volume to container
On deleting container volume does not delete

Commands
docker run --name MyJenkins1 -v myvol1:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins
docker run --name MyJenkins2 -v myvol1:/var/jenkins_home -p 9090:8080 -p 60000:50000 jenkins
ocker run --name MyJenkins3 -v /Users/raghav/Desktop/Jenkins_Home:/var/jenkins_home -p 9191:8080 -p 40000:50000 jenkins

References
https://hub.docker.com/_/jenkins/
https://docs.docker.com/storage/volumes/

NOTES

By default all files created inside a container are stored on a writable container layer

The data doesn’t persist when that container is no longer running

A container’s writable layer is tightly coupled to the host machine where the container is running. You can’t easily move the data somewhere else.

Docker has two options for containers to store files in the host machine
so that the files are persisted even after the container stops

VOLUMES  and  BIND MOUNTS

Volumes are stored in a part of the host filesystem which is managed by Docker
Non-Docker processes should not modify this part of the filesystem
Bind mounts may be stored anywhere on the host system
Non-Docker processes on the Docker host or a Docker container can modify them at any time
Bind Mounts => In Bind Mounts, the file or directory is referenced by its full path on the host machine. 


Volumes are the best way to persist data in Docker
volumes are managed by Docker and are isolated from the core functionality of the host machine

Bind Mounts =>  A given volume can be mounted into multiple containers simultaneously.

When no running container is using a volume, the volume is still available to Docker and is not removed automatically. 
You can remove unused volumes using docker volume prune.

When you mount a volume, it may be named or anonymous. 
Anonymous volumes are not given an explicit name when they are first mounted into a container
Volumes also support the use of volume drivers, which allow you to store your data on remote hosts or cloud providers, among other possibilities.


11. ************************** Docker Swarm ******************************

Free Courses - https://automationstepbystep.com/onli...
Today we will learn :
1. What is Docker Swarm
2. Why to use it
3. How to create and manage Docker Swarm
4. Create service on docker swarm
5. Scaling services up and down
6. Features/Helpful Tips
A swarm is a group of machines that are running Docker and joined into a cluster 
Docker Swarm is a tool for Container Orchestration

Let’s take an example
You have 100 containers
You need to do 
- Health check on every container
- Ensure all containers are up on every system
- Scaling the containers up or down depending on the load
- Adding updates/changes to all the containers

Orchestration - managing and controlling multiple docker containers as a single service
Tools available - Docker Swarm, Kubernetes, Apache Mesos

Pre-requisites
1. Docker 1.13 or higher
2. Docker Machine (pre installed for Docker for Windows and Docker for Mac)https://docs.docker.com/machine/insta...
https://docs.docker.com/get-started/p...

Step 1 :  Create Docker machines (to act as nodes for Docker Swarm)   Create one machine as manager and others as workers
    docker-machine create --driver hyperv manager1    docker-machine create --driver virtualbox manager1

   docker-machine:Error with pre-create check: “exit status 126”
   https://stackoverflow.com/questions/3...
   brew cask install virtualbox;

   Create one manager machine
   and other worker machines

Step 2 :  Check machine created successfully
    docker-machine ls
    docker-machine ip manager1

Step 3 :  SSH (connect) to docker machine
    docker-machine ssh manager1

Step 4 :  Initialize Docker Swarm    docker swarm init --advertise-addr MANAGER_IP
    docker node ls
    (this command will work only in swarm manager and not in worker)

Step 5 :  Join workers in the swarm
    Get command for joining as worker
    In manager node run command
    docker swarm join-token worker
    This will give command to join swarm as worker

    docker swarm join-token manager
    This will give command to join swarm as manager

    SSH into worker node (machine) and run command to join swarm as worker
   
    In Manager Run command - docker node ls to verify worker is registered and is ready
  
    Do this for all worker machines

Step 6 :  On manager run standard docker commands
    docker info
    check the swarm section 
    no of manager, nodes etc

    Now check docker swarm command options 
    docker swarm 

Step 7 :  Run containers on Docker Swarm
    docker service create --replicas 3 -p 80:80 --name serviceName nginx
    Check the status:
    docker service ls
    docker service ps serviceName
    Check the service running on all nodes
    Check on the browser by giving ip for all nodes

Step 8 :  Scale service up and down
   On manager node 
   docker service scale serviceName=2

Inspecting Nodes (this command can run only on manager node)
docker node inspect nodename
docker node inspect self
docker node inspect worker1

Step 9 : Shutdown node
   docker node update --availability drain worker1

Step 10 :  Update service
   docker service update --image imagename:version web
   docker service update --image nginx:1.14.0 serviceName

Step 11 :  Remove service
   docker service rm serviceName
docker swarm leave : to leave the swarm
docker-machine stop machineName : to stop the machine
docker-machine rm machineName : to remove the machine

REFERENCES:
https://docs.docker.com/get-started/p...
https://rominirani.com/docker-swarm-t...

FAQs & Helpful Tips:
A swarm is a group of machines that are running Docker and joined into a cluster
A cluster is managed by swarm manager
The machines in a swarm can be physical or virtual. After joining a swarm, they are referred to as nodes
Swarm managers are the only machines in a swarm that can execute your commands, or authorise other machines to join the swarm as workers

Workers are just there to provide capacity and do not have the authority to tell any other machine what it can and cannot do

you can have a node join as a worker or as a manager. At any point in time, there is only one LEADER and the other manager nodes will be as backup in case the current LEADER opts out

#DockerSwarm #WhatIsDockerSwarm #DockerTutorials #DockerTraining #DevOpsTools #DevOpsTraining #DockerCommands #DockerForBeginners #DockerFreeTutorials #DockerforDevOps

12. ************************** Docker Interview Questions 1 ******************************


Today we will learn:

What is Docker

How Docker works

Difference between Virtualization & Containerization

Explain Docker Architecture

Advantages of using Docker

What are Docker Images

What are Docker Containers

What is Dockerfile

What is Docker Compose


12. ************************** Docker Interview Questions 2 ******************************
 
Today we will learn:

Part 1
=====

What is Docker

How Docker works

Difference between Virtualization & Containerization

Explain Docker Architecture

Advantages of using Docker

Part 2
=====

What are Docker Images

What are Docker Containers

What is Dockerfile

What is Docker Compose

