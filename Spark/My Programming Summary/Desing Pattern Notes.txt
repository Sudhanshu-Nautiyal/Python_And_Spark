Design patterns are solutions to recurring problems; guidelines on how to tackle certain problems. They are not classes, packages 
or libraries that you can plug into your application and wait for the magic to happen. These are, rather, guidelines on how to tackle 
certain problems in certain situations.

Wikipedia describes them as:-

In software engineering, a software design pattern is a general reusable solution to a commonly occurring problem within a given context 
in software design. It is not a finished design that can be transformed directly into source or machine code. It is a description or template 
for how to solve a problem that can be used in many different situations.


Types of Design Patterns

1. Creational
2. Structural
3. Behavioral

1. Creational ->

    Simple Factory
    Factory Method
    Abstract Factory
    Builder
    Prototype
    Singleton
	
Creational -> Focused towards how to instantiate an object or group of related objects. 
                 The basic form of object creation could result in design problems or added complexity to the design. 
				 Creational design patterns solve this problem by somehow controlling this object creation.
				 
	    
    Simple Factory :- Simple factory simply generates an instance for client without exposing any instantiation logic to the client.
	               When to Use? => When creating an object is not just a few assignments and involves some logic, it makes sense to 
				                   put it in a dedicated factory instead of repeating the same code everywhere.
	
	Factory Method :- It provides a way to delegate the instantiation logic to child classes. Hiring Manager Example.
	               When to use? => Useful when there is some generic processing in a class but the required sub-class is dynamically 
				                   decided at runtime. Or putting it in other words, when the client doesn't know what exact sub-class 
								   it might need.
	
	Abstract Factory :- A factory of factories; a factory that groups the individual but related/dependent factories 
	                    together without specifying their concrete classes
				   When to use? => When there are interrelated dependencies with not-that-simple creation logic involved.
						
    Builder :-   Allows you to create different flavors of an object while avoiding constructor pollution. Useful when there 
	             could be several flavors of an object. Or when there are a lot of steps involved in creation of an object.
				 
				 Wikipedia says => The builder pattern is an object creation software design pattern with the intentions of finding 
				                   a solution to the telescoping constructor anti-pattern.
								   
                   When to use? => When there could be several flavors of an object and to avoid the constructor telescoping. The key 
				                   difference from the factory pattern is that; factory pattern is to be used when the creation is a one 
								   step process while builder pattern is to be used when the creation is a multi step process.

	Prototype :- Create object based on an existing object through cloning. 
                 In short, it allows you to create a copy of an existing object and modify it to your needs, 
				 instead of going through the trouble of creating an object from scratch and setting it up.
				 
				   When to use? => When an object is required that is similar to existing object or when the creation would be expensive as 
				                   compared to cloning.
								   
    Singleton :- Ensures that only one object of a particular class is ever created. 
                 Wikipedia says => This is useful when exactly one object is needed to coordinate actions across the system.
				 
				 Singleton pattern is actually considered an anti-pattern and overuse of it should be avoided. It is not necessarily 
				 bad and could have some valid use-cases but should be used with caution because it introduces a global state in your application and 
				 change to it in one place could affect in the other areas and it could become pretty difficult to debug. The other bad thing about them 
				 is it makes your code tightly coupled plus it mocking the singleton could be difficult.
	

	
				 

2. Structural ->  Mostly concerned with object composition or how the entities can use each other or they help in answering "How to build 
                  a software component?"
				  
				  Wikipedia says :-Ease the design by identifying a simple way to realize relationships between entities.

    Adapter
    Bridge
    Composite
    Decorator
    Facade
    Flyweight
    Proxy
	
	Adapter :-  In plain words => Adapter pattern lets you wrap an otherwise incompatible object in an adapter to make it compatible with another class.
	
				Wikipedia says =>A software design pattern that allows the interface of an existing class to be used as another interface. It is often used 
				to make existing classes work with others without modifying their source code.
				
				Example would be a translator translating words spoken by one person to another
	 
	Bridge :- 
				Real world example :-  Consider you have a website with different pages and you are supposed to allow the user to change the theme. What would you do? 
				Create multiple copies of each of the pages for each of the themes or would you just create separate theme and load them based on 
				the user's preferences? Bridge pattern allows you to do the second i.e.
				
				In Plain Words :- Bridge pattern is about preferring composition over inheritance. Implementation details are pushed from a hierarchy to 
								  another object with a separate hierarchy.
								  
				Wikipedia says :- The bridge pattern is a design pattern used in software engineering that is meant to "decouple an abstraction from its 
								  implementation so that the two can vary independently"
    
	Composite :- 		                
				Real world example :- Every organization is composed of employees. Each of the employees has same features i.e. has a salary, 
									  has some responsibilities, may or may not report to someone, may or may not have some subordinates etc.

				In plain words :- Composite pattern lets clients to treat the individual objects in a uniform manner.

				Wikipedia says :- In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes 
								  that a group of objects is to be treated in the same way as a single instance of an object. The intent of a composite 
								  is to "compose" objects into tree structures to represent part-whole hierarchies. Implementing the composite pattern lets 
								  clients treat individual objects and compositions uniformly.
	
	Decorator :- 	           
			   Real world example :- Imagine you run a car service shop offering multiple services. Now how do you calculate the bill to be charged? 
			                      You pick one service and dynamically keep adding to it the prices for the provided services till you get the final cost. Here each type of service is a decorator.

               In plain words :- Decorator pattern lets you dynamically change the behavior of an object at run time by wrapping them in an object of a 
			                     decorator class.
								 
    Facade :- 
               In plain words :- Facade pattern provides a simplified interface to a complex subsystem.

               Wikipedia says :- A facade is an object that provides a simplified interface to a larger body of code, such as a class library.
			   
			   Real world example :- How do you turn on the computer? "Hit the power button" you say! That is what you believe because you are using 
			                         a simple interface that computer provides on the outside, internally it has to do a lot of stuff to make it happen. 
									 This simple interface to the complex subsystem is a facade.
									 
    Flyweight :- 
				In plain words :- It is used to minimize memory usage or computational expenses by sharing as much as possible with similar objects.

				Wikipedia says :- In computer programming, flyweight is a software design pattern. A flyweight is an object that minimizes memory use 
								  by sharing as much data as possible with other similar objects; it is a way to use objects in large numbers when a 
								  simple repeated representation would use an unacceptable amount of memory.
								  
				Real world example :- Did you ever have fresh tea from some stall? They often make more than one cup that you demanded and save the rest 
									  for any other customer so to save the resources e.g. gas etc. Flyweight pattern is all about that i.e. sharing.
									  
    Proxy :- 	In plain words :- Using the proxy pattern, a class represents the functionality of another class.
	
	            Real world example :- Have you ever used an access card to go through a door? There are multiple options to open that door i.e. it can be opened either using access card or by pressing a button that bypasses the security. The door's main functionality is to open but there is a proxy added on top of it to add some functionality. Let me better explain it using the code example below.



		
3. Behavioral -> 

            In plain words :- It is concerned with assignment of responsibilities between the objects. What makes them different from structural patterns 
			                  is they don't just specify the structure but also outline the patterns for message passing/communication between them. 
							  Or in other words, they assist in answering "How to run a behavior in software component?"

            Wikipedia says :- In software engineering, behavioral design patterns are design patterns that identify common communication patterns between 
			                  objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication.


    Chain of Responsibility
    Command
    Iterator
    Mediator
    Memento
    Observer
    Visitor
    Strategy
    State
    Template Method
	
Chain of Responsibility :- 
	
            In plain words :- It helps building a chain of objects. Request enters from one end and keeps going from object to object till it finds 
			                  the suitable handler.

            Wikipedia says :- In object-oriented design, the chain-of-responsibility pattern is a design pattern consisting of a source of command objects 
			                  and a series of processing objects. Each processing object contains logic that defines the types of command objects that 
							  it can handle; the rest are passed to the next processing object in the chain.
							  
							  
	
Command :- 

            Real world example :- A generic example would be you ordering a food at restaurant. You (i.e. Client) ask the waiter (i.e. Invoker) to 
			                     bring some food (i.e. Command) and waiter simply forwards the request to Chef (i.e. Receiver) who has the knowledge of 
								 what and how to cook. Another example would be you (i.e. Client) switching on (i.e. Command) the television (i.e. Receiver) 
								 using a remote control (Invoker).

            In plain words :-  Allows you to encapsulate actions in objects. The key idea behind this pattern is to provide the means to decouple client 
			                   from receiver.

            Wikipedia says :-  In object-oriented programming, the command pattern is a behavioral design pattern in which an object is used to encapsulate 
			                   all information needed to perform an action or trigger an event at a later time. This information includes the method name, the 
							   object that owns the method and values for the method parameters.
							   
Iterator :-  

            Real world example :- An old radio set will be a good example of iterator, where user could start at some channel and then use next or previous 
			                    buttons to go through the respective channels. Or take an example of MP3 player or a TV set where you could press the next 
								and previous buttons to go through the consecutive channels or in other words they all provide an interface to iterate through 
								the respective channels, songs or radio stations.

            In plain words :- It presents a way to access the elements of an object without exposing the underlying presentation.

            Wikipedia says :- In object-oriented programming, the iterator pattern is a design pattern in which an iterator is used to traverse a 
			                  container and access the container's elements. The iterator pattern decouples algorithms from containers; in some cases, 
							  algorithms are necessarily container-specific and thus cannot be decoupled.
							  
Mediator :- 

			Real world example :- A general example would be when you talk to someone on your mobile phone, there is a network provider sitting between 
			                  you and them and your conversation goes through it instead of being directly sent. In this case network provider is mediator.

			In plain words :- Mediator pattern adds a third party object (called mediator) to control the interaction between two objects (called colleagues). 
							It helps reduce the coupling between the classes communicating with each other. Because now they don't need to have the knowledge of each other's 
							implementation.

			Wikipedia says :- In software engineering, the mediator pattern defines an object that encapsulates how a set of objects interact. This pattern 
			                is considered to be a behavioral pattern due to the way it can alter the program's running behavior.
							
Memento :- 							
			Real world example :- Take the example of calculator (i.e. originator), where whenever you perform some calculation the last calculation is 
			                  saved in memory (i.e. memento) so that you can get back to it and maybe get it restored using some action buttons 
							  (i.e. caretaker).

			In plain words :- Memento pattern is about capturing and storing the current state of an object in a manner that it can be restored later on 
			                  in a smooth manner.

			Wikipedia says :- The memento pattern is a software design pattern that provides the ability to restore an object to its previous state 
			                 (undo via rollback).

			Usually useful when you need to provide some sort of undo functionality.	

Observer :- 
			Real world example :- A good example would be the job seekers where they subscribe to some job posting site and they are notified whenever there is a 
								  matching job opportunity.

			In plain words :- Defines a dependency between objects so that whenever an object changes its state, all its dependents are notified.

			Wikipedia says :- The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, 
			                  called observers, and notifies them automatically of any state changes, usually by calling one of their methods.
						
Visitor :- 
			Real world example :- Consider someone visiting Dubai. They just need a way (i.e. visa) to enter Dubai. After arrival, they can come and visit 
			                      any place in Dubai on their own without having to ask for permission or to do some leg work in order to visit any place 
								  here; just let them know of a place and they can visit it. Visitor pattern lets you do just that, it helps you add places 
								  to visit so that they can visit as much as they can without having to do any legwork.

			In plain words :- Visitor pattern lets you add further operations to objects without having to modify them.

			Wikipedia says :- In object-oriented programming and software engineering, the visitor design pattern is a way of separating an algorithm from 
			                  an object structure on which it operates. A practical result of this separation is the ability to add new operations to existing 
							  object structures without modifying those structures. It is one way to follow the open/closed principle.
							  
Strategy :- 
			Real world example :- Consider the example of sorting, we implemented bubble sort but the data started to grow and bubble sort started getting 
			                      very slow. In order to tackle this we implemented Quick sort. But now although the quick sort algorithm was doing better 
								  for large datasets, it was very slow for smaller datasets. In order to handle this we implemented a strategy where for small 
								  datasets, bubble sort will be used and for larger, quick sort.

			In plain words :- Strategy pattern allows you to switch the algorithm or strategy based upon the situation.

			Wikipedia says :- In computer programming, the strategy pattern (also known as the policy pattern) is a behavioural software design pattern 
			                  that enables an algorithm's behavior to be selected at runtime.
							  
State :- 

			Real world example :-Imagine you are using some drawing application, you choose the paint brush to draw. Now the brush changes its behavior 
			                     based on the selected color i.e. if you have chosen red color it will draw in red, if blue then it will be in blue etc.

			In plain words :- It lets you change the behavior of a class when the state changes.

			Wikipedia says :- The state pattern is a behavioral software design pattern that implements a state machine in an object-oriented way. 
			                  With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the 
							  state pattern interface, and implementing state transitions by invoking methods defined by the pattern's superclass. 
							  The state pattern can be interpreted as a strategy pattern which is able to switch the current strategy through invocations 
							  of methods defined in the pattern's interface.
										  
Template Method :- 

			Real world example :- Suppose we are getting some house built. The steps for building might look like
					Prepare the base of house
					Build the walls
					Add roof
					Add other floors 
								The order of these steps could never be changed i.e. you can't build the roof before building the walls 
								etc but each of the steps could be modified for example walls can be made of wood or polyester or stone.

			In plain words :- Template method defines the skeleton of how a certain algorithm could be performed, but defers the implementation 
			                  of those steps to the children classes.

			Wikipedia says :- In software engineering, the template method pattern is a behavioral design pattern that defines the program skeleton 
			                  of an algorithm in an operation, deferring some steps to subclasses. It lets one redefine certain steps of an algorithm 
							  without changing the algorithm's structure.

			Programmatic Example :- Imagine we have a build tool that helps us test, lint, build, generate build reports (i.e. code coverage reports, 
			                  linting report etc) and deploy our app on the test server.

			First of all we have our base class that specifies the skeleton for the build algorithm													  

																												   
																						
																						